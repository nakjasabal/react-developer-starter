let과 const
변수 선언 방식과 스코프의 차이.
React의 상태나 컴포넌트 개발에서 const와 let의 적절한 사용.
=========
템플릿 리터럴 (Template Literals)

백틱(`)을 사용한 문자열 삽입 및 다중 행 문자열.
React JSX에서 동적 문자열 생성에 유용.
=========
화살표 함수 (Arrow Functions)

함수 선언 방식의 단순화.
this 바인딩의 차이점.
=========
디스트럭처링 (Destructuring) >> 구조분해할당

배열과 객체에서 값을 쉽게 추출.
React의 props와 state에서 활용.
=========
스프레드 연산자와 나머지 연산자 (...) 

객체와 배열의 복사 및 병합.
React 상태 관리에서 불변성을 유지하는 데 유용.

1.스프레드 연산자 (Spread Operator)
역할: 배열, 객체 등의 요소를 펼쳐서(spread) 별개의 개별 요소로 분리.

2.나머지 연산자 (Rest Operator)
역할: 함수 매개변수나 배열/객체에서 *나머지 값(rest)*을 하나로 모아 새로운 변수에 저장.

**스프레드 연산자(Spread Operator)**와 **나머지 연산자(Rest Operator)**를 분리해서 각각 설명하는 것이 좋습니다. 이유는 두 연산자가 문법적으로 동일한 ...을 사용하지만, 기능과 사용되는 문맥이 완전히 다르기 때문입니다.
=========
모듈화 (Modules)

export와 import를 사용한 코드 재사용.
React 컴포넌트 파일 구조와 일치.
=========
기본 매개변수 (Default Parameters)

함수 매개변수에 기본값 제공.
=========
Promise와 비동기 처리

Promise와 async/await를 사용한 비동기 코드 작성.
React의 데이터 페칭과 연관.
=========
고차함수..
=========
옵셔널s(?.)

중첩된 객체 속성을 안전하게 접근.
=========
널 병합 연산자 (??)

값이 null 또는 undefined인 경우 기본값 제공.
=========


요기 문서와 비교해볼것..
https://docs.google.com/document/d/1ld7QnaiYhgi1eUDEc4hxo-ZdQRJzrQv46y3WF3SlyrY/edit?tab=t.0




